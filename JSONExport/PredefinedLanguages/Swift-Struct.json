{
    "langName": "Swift",
    "displayLangName": "Swift - Struct",
    "briefDescription" : "Defines how your JSON objects can be mapped to Swift structures using the built-in NSJSONSerialization class",
    "fileExtension": "swift",
    "genericType": "AnyObject",
    "arrayType": "[<!ElementType!>]",
    "dataTypes": {
        "intType" : "Int",
        "boolType": "Bool",
        "characterType": "Character",
        "floatType": "Float",
        "longType": "Double",
        "doubleType": "Double",
        "stringType": "String"
    },
    "supportsFirstLineStatement" : "false",
    "staticImports": "import Foundation",
    "importForEachCustomType": "",
    "modelDefinition": "\nstruct <!ModelName!>",
    "modelStart": "{\n",
    "modelEnd": "\n}",
    "instanceVarDefinition": "\tvar <!VarName!> : <!VarType!>!\n",
    "setter" : "",
    "getter" : "",
    "booleanGetter" : "",
    "reservedKeywords" : ["abstract", "assert", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "default", "do", "double", "else", "enum", "extends", "false", "final", "finally", "float", "for", "goto", "if", "implements", "import", "instanceof", "int", "interface", "long", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "strictfp", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "void", "volatile", "while", "class", "description"],
    "wordsToRemoveToGetArrayElementsType": [
                                            "[",
                                            "]"
                                            ],
    "basicTypesWithSpecialFetchingNeeds" : [
    
                                            ],
    "constructors": [
                     {
                     "comment": "\t/**\n\t * Instantiate the instance using the passed dictionary values to set the properties values\n\t */\n",
                     "signature": "\tinit(fromDictionary dictionary: NSDictionary)",
                     "bodyStart": "{\n",
                     "bodyEnd": "\t}\n",
                     "fetchBasicTypePropertyFromMap": "\t\t<!VarName!> = dictionary[\"<!JsonKeyName!>\"] as? <!VarType!>\n",
                     "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "",
                     "fetchCustomTypePropertyFromMap": "\t\tif let <!VarName!>Data = dictionary[\"<!JsonKeyName!>\"] as? NSDictionary{\n\t\t\t\t<!VarName!> = <!VarType!>(fromDictionary: <!VarName!>Data)\n\t\t\t}\n",
                     "fetchArrayOfCustomTypePropertyFromMap": "\t\t<!VarName!> = <!VarType!>()\n\t\tif let <!VarName!>Array = dictionary[\"<!JsonKeyName!>\"] as? [NSDictionary]{\n\t\t\tfor dic in <!VarName!>Array{\n\t\t\t\tlet value = <!ElementType!>(fromDictionary: dic)\n\t\t\t\t<!VarName!>.append(value)\n\t\t\t}\n\t\t}\n"
                     }
                     ],
    "utilityMethods": [
                       {
                       "comment": "\t/**\n\t * Returns all the available property values in the form of NSDictionary object where the key is the approperiate json key and the value is the value of the corresponding property\n\t */\n",
                       "signature": "\tfunc toDictionary() -> NSDictionary",
                       "bodyStart": "\n\t{\n",
                       "bodyEnd": "\t}\n",
                       "body": "\t\tvar dictionary = NSMutableDictionary()\n",
                       "forEachProperty": "\t\tif <!VarName!> != nil{\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = <!VarName!>\n\t\t}\n",
                       "forEachCustomTypeProperty" : "\t\tif <!VarName!> != nil{\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = <!VarName!>.toDictionary()\n\t\t}\n",
                       "forEachArrayOfCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\tvar dictionaryElements = [NSDictionary]()\n\t\t\tfor <!VarName!>Element in <!VarName!> {\n\t\t\t\tdictionaryElements.append(<!VarName!>Element.toDictionary())\n\t\t\t}\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = dictionaryElements\n\t\t}\n",
                       "returnStatement": "\t\treturn dictionary\n"
                       }
                       ]
}